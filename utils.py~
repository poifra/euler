import math

def genPrimes(n):
	'''
	Crible d'Érathostène pour trouver tous les premiers < n.
	'''
	l = [i for i in range(2,n)]
	for x in range(2,int(math.sqrt(n))):
		l = list(filter(lambda d: d%x != 0 or d == x, l))
	return sorted(l)

def primeFactors(val):
	'''
	Retourne la liste des facteurs premiers (non distincts) de val.
	'''
	result = [] 
	for k in range(2, val): 
		if (val % k == 0):
			i = int(val / k) 
			return [k] + primeFactors(i) 
	return [val]

def fact(n):
	'''
	Retourne les facteurs de n.	
	'''
	divs = []
	for x in range(1,int(math.sqrt(n))):
		if n%x == 0:
			divs.append(x)
			divs.append(n//x)
	divs.sort()
	return divs

def collatz(n):
	lst = [n]
	k = n
	while k != 1:
		if k % 2 == 0:
			lst.append(k//2)
		else:
			lst.append(3*k+1)
		k = lst[-1]
	return lst
